---
- name: Check if fonts are installed
  ansible.builtin.find:
    paths: ~/.local/share/fonts
    patterns: "*.ttf"
    recurse: yes
  register: fonts_installed
- name: Font Installation
  block:
    - name: Ensure fonts folders exists
      file:
        path: "$HOME/.local/share/fonts/{{ item }}"
        state: directory
      loop: "{{ fonts_to_install.keys() }}"
    - name: Download extra fonts
      unarchive:
        src: "{{ item.value }}"
        dest: "$HOME/.local/share/fonts/{{ item.key }}"
        creates: "~/.local/share/fonts/{{ item.key }}/*.ttf"
        remote_src: yes
      loop: "{{ fonts_to_install | dict2items }}"
    - name: Run fc-cache
      command: fc-cache
      register: output
      failed_when: output.rc != 0
      changed_when: '"caching, new cache contents" in output.stdout'
  when: fonts_installed.matched == 0
- name: Check if rustup is installed
  shell: rustup -V
  args:
    executable: /bin/bash
  register: rustup_installed
  changed_when: false
  failed_when: false
- name: rustup installation
  block:
    - name: Download rustup
      uri:
        url: https://sh.rustup.rs
        return_content: yes
      register: rustup_installer
    - name: Run rustup installer
      shell:
        cmd: sh -s -- -y
        stdin: "{{ rustup_installer.content }}"
      register: output
      changed_when: '"Rust is installed now" in output.stdout'
      failed_when: output.rc != 0
  when: "rustup_installed.rc != 0"
- name: Check if pyenv is installed
  shell: pyenv version-name
  args:
    executable: /bin/bash
  register: pyenv_installed
  changed_when: false
  failed_when: false
  tags: ["pyenv"]
- name: pyenv installation
  block:
    - name: Ensure pyenv is installed at ~/.pyenv
      git:
        repo: "https://github.com/pyenv/pyenv.git"
        dest: $HOME/.pyenv
        update: yes
    - name: Ensure previous installation is removed if different
      shell: "$HOME/.pyenv/bin/pyenv uninstall -f $($HOME/.pyenv/bin/pyenv version-name)"
    - name: Ensure selected version of Python is installed with pyenv
      shell: "$HOME/.pyenv/bin/pyenv install {{ python_to_install }} -s"
      register: output
      changed_when: '"Installed" in output'
      failed_when: output.rc != 0
    - name: Ensure selected version of Python is set to global
      shell: '$HOME/.pyenv/bin/pyenv global "{{ python_to_install }}" && $HOME/.pyenv/bin/pyenv global'
      register: output
      failed_when: "python_to_install != output.stdout or output.rc != 0"
      changed_when: false
    - name: Ensure Python packages are installed to global pyenv
      shell: '$HOME/.pyenv/shims/pip install {{ python_packages_to_install | join(" ") }}'
      register: output
      failed_when: output.rc != 0
      changed_when: '"Requirement already satisfied" not in output.stdout'
  when: "pyenv_installed.rc != 0 or python_to_install not in pyenv_installed.stdout"
  tags: ["pyenv"]
- name: Ensure Code extensions are installed
  block:
    - name: Get installed extensions
      shell: "code-insiders --list-extensions"
      register: installed_extensions
      changed_when: false
    - name: Uninstall existing extensions
      shell: "code-insiders --list-extensions | xargs -n1 code-insiders --uninstall-extension"
      when: "code_extensions_to_install != installed_extensions.stdout_lines"
    - name: Code extensions installation
      shell: "code-insiders --install-extension {{ item }}"
      loop: "{{ code_extensions_to_install }}"
      register: output
      failed_when: output.rc != 0
      changed_when: '"already installed" not in output.stdout'
      when: "code_extensions_to_install != installed_extensions.stdout_lines"
  tags: ["code"]
- name: Ensure user services are enabled
  ansible.builtin.systemd:
    name: "{{ item }}"
    scope: user
    state: started
    enabled: yes
  loop: "{{ user_services }}"
  tags: ["systemd"]